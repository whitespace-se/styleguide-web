//
// @name Grid
// @description HbgPrime's grid system is a 12 column responsive grid.<br><strong>ATTENTION:</strong> Remove the <code>.grid-example</code> class before using.
//
// @page Layout/Grid
//
// @state .grid-md-fit-content
// @state .grid-md-auto
//
// @markup
// <div class="container-fluid">
// <div class="grid grid-example">
//     <div class="grid-md-3">grid-md-3</div>
//     <div class="grid-md-9">grid-md-9</div>
// </div>
// <div class="grid grid-example">
//     <div class="grid-md-4">ett</div>
//     <div class="grid-md-4">två<br>tre</div>
//     <div class="grid-md-4">fyra</div>
//     <div class="grid-md-4">fem</div>
//     <div class="grid-md-4">sex<br>sju</div>
//     <div class="grid-md-4">åtta</div>
// </div>
//  </div>
//

@mixin generateGrid($columns, $breakpoints, $gutters, $includePrint: true) {
    .grid {
        display: flex;
        flex-wrap: wrap;
    }

    %column {
        position: relative;
        width: 100%;
        min-height: 1px;
    }

    //Column styling to all children
    .grid > * {
        @extend %column;
    }

    //Gutter styles
    @each $breakpoint, $gutter in $gutters {
        @include mq($breakpoint) {
            .grid {
                margin-left: $gutter/2 * -1;
                margin-right: $gutter/2 * -1;
            }

            %column {
                padding-right: $gutter/2;
                padding-left: $gutter/2;
                // margin-bottom: $gutter;
            }
        }
    }

    //Include print breakpoint
    @if $includePrint == true {
        $breakpoints: append($breakpoints, 'print');
    }

    //Generate Columns
    @each $breakpoint in $breakpoints {

        //Generate list of column classes
        $columnClasses: ();
        @for $i from 1 to $columns + 1 {
            $columnClasses: append($columnClasses, ".grid-#{$breakpoint}-#{$i}, ");
        }

        //Apply common column styles
        #{$columnClasses},
        .grid-#{$breakpoint}-auto,
        .grid-#{$breakpoint}-fit-content {
            @extend %column;
        }

        //Breakpoint specific
        @include mq($breakpoint) {

            //Auto width column (eg .grid-md-auto)
            .grid-#{$breakpoint}-auto {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }

            //Fit content column (eg .grid-md-fit-content)
            .grid-#{$breakpoint}-fit-content {
                flex: 0 0 auto;
                width: auto;
                max-width: none;
            }

            //Width based Columns (eg .grid-md-6)
            @for $i from 1 to $columns + 1 {
                .grid-#{$breakpoint}-#{$i} {
                    flex: 0 0 #{$i / $columns * 100 * 1%};
                    max-width: #{$i / $columns * 100 * 1%};
                }
            }

            //Order (eg .order-md-6)
            @for $i from 1 to $columns + 1 {
                .order-#{$breakpoint}-#{$i} {
                    order: $i;
                }
            }

            //Offset (eg .offset-md-6)
            @for $i from 1 to $columns + 1 {
                .offset-#{$breakpoint}-#{$i} {
                    margin-left: #{$i / $columns * 100 * 1%};
                }
            }
        }
    }

    //Prevent old classes from breaking
    .grid-fit-content {
        @extend .grid-xs-fit-content;
    }
    .grid-auto {
        @extend .grid-xs-auto;
    }
}

$grid-columns: 12 !default;
$grid-breakpoints: map-keys($mix-mq-breakpoints) !default;
$grid-gutters: (
    xs : $baseline,
    sm : $baseline * 4
) !default;

@include generateGrid($grid-columns, $grid-breakpoints, $grid-gutters);

.grid.no-gutter {
    margin-left: 0;
    margin-right: 0;

    > [class*="grid-"]:not(.grid, [class*="grid--"]) {
        padding-left: 0;
        padding-right: 0;
    }
}


.grid.sm-gutter {
    margin-left: -8px;
    margin-right: -8px;

    > [class*="grid-"]:not(.grid, [class*="grid--"]) {
        padding-left: 8px;
        padding-right: 8px;
    }
}


.grid--columns {
    > [class*="grid-"]:not(.grid, [class*="grid--"]) {
        margin-bottom: $baseline * 4;
    }
}

.grid--margins {
     @extend .grid--columns;
}

//Temporary scope fix!
.modularity-mod-index > .grid,
.modularity-mod-posts > .grid,
.modularity-mod-contact > .grid,
.mod-posts > .grid {
    @extend .grid--columns;
}

.customer-feedback-container {
    margin-bottom: $baseline * 4;
}

.grid.grid-va-middle {
    align-items: center;
}

.grid.grid-va-bottom {
    align-items: flex-end;
}

.grid.grid-va-top {
    align-items: top;
}

// ***************************************************************
// *** Grid container/row
// ***************************************************************
// .grid {
//     width: auto;
//     @extend .clearfix;

//     @media print {
//         display: block !important;

//         > * {
//             max-width: 100% !important;
//             width: 100% !important;
//         }
//     }
// }

// .grid-defined-width {

// }

// .grid-fit-content {
//     width: 1%;
// }


// ***************************************************************
// *** Grid column gutter
// ***************************************************************
// [class*="grid-"]:not(.grid-table, .grid-va-middle) {
//     min-height: 1px;
//     padding-left: $grid-gutter-xs / 2;
//     padding-right: $grid-gutter-xs / 2;

//     @media #{$screen-sm} {
//         padding-left: $grid-gutter-sm / 2;
//         padding-right: $grid-gutter-sm / 2;
//     }

//     @media #{$screen-md} {
//         padding-left: $grid-gutter-md / 2;
//         padding-right: $grid-gutter-md / 2;
//     }

//     @media #{$screen-lg} {
//         padding-left: $grid-gutter-lg / 2;
//         padding-right: $grid-gutter-lg / 2;
//     }
// }

// ***************************************************************
// *** Grid columns
// ***************************************************************

// // X-Small screens
// // This will generate grid-xs-*
// @include grid($screen-xs-up, $screen-xs, 'xs');

// // Small screens
// // This will generate grid-sm-*
// @include grid($screen-sm-up, $screen-sm, 'sm');

// // Medium screens
// // This will generate grid-md-*
// @include grid($screen-md-up, $screen-md, 'md');

// // Large screens and up
// // This will generate grid-lg-*
// @include grid($screen-lg-up, $screen-lg, 'lg');

// // Print grid size
// @media print {
//     @for $i from 1 to $grid-column-count + 1 {
//         .grid-print-#{$i}.grid-print-#{$i} {
//             display: block;
//             float: left;
//             width: (100% / $grid-column-count) * $i;
//         }
//     }

//     .grid-tester::after {
//         content: 'print';
//     }
// }

// .grid-tester {
//     position: fixed;
//     bottom: 0;
//     left: 0;
//     background-color: #000;
//     color: #fff;
//     padding: 10px;
//     width: 50px;
//     text-align: center;
//     z-index: $level-top;
// }

// ***************************************************************
// *** Grid + grid margin
// ***************************************************************
/*
@media #{$screen-below-xs} {
    @for $i from 1 to $grid-column-count + 1 {
        [class*="grid-xs-"] + [class*="grid-xs-"] {
            margin-top: $content-gutter;
        }
    }
}

@media #{$screen-below-sm} {
    @for $i from 1 to $grid-column-count + 1 {
        [class*="grid-sm-"] + [class*="grid-sm-"] {
            margin-top: $content-gutter;
        }
    }
}

@media #{$screen-below-md} {
    @for $i from 1 to $grid-column-count + 1 {
        [class*="grid-md-"] + [class*="grid-md-"] {
            margin-top: $content-gutter;
        }
    }
}

@media #{$screen-below-lg} {
    @for $i from 1 to $grid-column-count + 1 {
        [class*="grid-lg-"] + [class*="grid-lg-"] {
            margin-top: $content-gutter;
        }
    }
}
*/


// ***************************************************************
// *** Grid inside grid, fix margins
// ***************************************************************
// .grid {
//     @media #{$screen-xs} {

//         margin-left: -($grid-gutter-xs / 2);
//         margin-right: -($grid-gutter-xs / 2);


//         & + .grid {
//             margin-top: $grid-gutter-xs;
//         }
//     }

//     @media #{$screen-sm} {

//         margin-left: -($grid-gutter-sm / 2);
//         margin-right: -($grid-gutter-sm / 2);

//         & + .grid {
//             margin-top: $grid-gutter-sm;
//         }
//     }

//     @media #{$screen-md} {

//         margin-left: -($grid-gutter-md / 2);
//         margin-right: -($grid-gutter-md / 2);

//         & + .grid {
//             margin-top: $grid-gutter-md;
//         }
//     }

//     @media #{$screen-lg} {
//         margin-left: -($grid-gutter-lg / 2);
//         margin-right: -($grid-gutter-lg / 2);

//         & + .grid {
//             margin-top: $grid-gutter-lg;
//         }
//     }
// }

// ***************************************************************
// *** Grid as display table (to be able to vertical align)
// ***************************************************************

// .grid-table {
//     @include grid-table;

//     &.grid-table-autofit [class*="grid-"] {
//         max-width: none;
//     }
// }

//     @media #{$screen-xs-up} {
//         .grid-table-xs {
//             @include grid-table;
//         }
//     }

//     @media #{$screen-sm-up} {
//         .grid-table-sm {
//             @include grid-table;
//         }
//     }

//     @media #{$screen-md-up} {
//         .grid-table-md {
//             @include grid-table;
//         }
//     }

//     @media #{$screen-lg-up} {
//         .grid-table-lg {
//             @include grid-table;
//         }
//     }

/***************************************************************
*** Styleguide helper
***************************************************************/
.grid-example [class*="grid-"]:not(.grid, [class*="grid--"]) {
    background-color: $creamy;
    border: 1px solid $creamy-darker;
    overflow: hidden;
}

// .grid.no-gutter [class*="grid-"] {
//     padding-left: 0;
//     padding-right: 0;
// }

// .grid-va-bottom {
//     align-items: bottom;

//     [class*="grid-"] {
//         vertical-align: bottom;
//     }
// }



// ==========================================================================
// Modularity grid
// ==========================================================================

.grid-xs-12[class*="modularity-mod-"],
.grid-sm-12[class*="modularity-mod-"],
.grid-md-12[class*="modularity-mod-"],
.grid-lg-12[class*="modularity-mod-"] {
    & + .grid-xs-12[class*="modularity-mod-"],
    & + .grid-sm-12[class*="modularity-mod-"],
    & + .grid-md-12[class*="modularity-mod-"],
    & + .grid-lg-12[class*="modularity-mod-"] {
        margin-top: $grid-gutter-xs;

        @media #{$screen-sm-up} {
            margin-top: $grid-gutter-sm;
        }

        @media #{$screen-md-up} {
            margin-top: $grid-gutter-md;
        }

        @media #{$screen-lg-up} {
            margin-top: $grid-gutter-lg;
        }
    }
}


// ==========================================================================
// Form grid
// ==========================================================================

.grid.mod-form-field + .grid.mod-form-field {
    margin-top: $baseline * 3;
}


